# System
import os, sys

# Local
import lib.lib
from lib.register import register, unregister
from lib.status import info, status
from lib.poll import sync
from lib.scheduled_task import install_scheduled_task, remove_scheduled_task
from lib.file import add, remove, disable
from lib.configuration import genconfig


config = lib.lib.check_config(lib.lib.get_config('config'), sys.argv)

cmd_list = (
    ('register', '', 'Register this host with CMDB.'),
    ('unregister', '', 'Unregister this host with CMDB.'),
    ('info', '', 'Get the information related to this host.'),
    ('genconfig', '--save-config', 'Generate the configuration needed to interact with CMDB.'),
    ('status', '', 'Get the configuration status of this host.'),
    ('st', '', 'Get the configuration status of this host.'),
    ('add', 'FILE', 'Add a configuration FILE for this host.'),
    ('remove', 'FILE', 'Remove a configuration FILE for this host.'),
    ('disable', 'FILE', 'Disable a configuration FILE for this host.'),
    ('sync', '[FILE]', 'Sync CMDB managed files. If FILE is specified, only sync that FILE.'),
    ('install_scheduled_task', '', 'Install the CMDB polling script as a scheduled task.'),
    ('remove_scheduled_task', '', 'Remove the CMDB polling script scheduled task.'),
)

options_list = (
    ('FILE', '', 'Required. The file on the filesystem to adjust.'),
    ('[FILE]', '', 'Optional. The file on the filesystem to adjust.'),
    ('--save-config', '', 'Optional. Save the configuration generated by agent.py.'),
    ('-h | --help', '', 'Optional. Display this help section.'),
)


def usage(args):
    print('Usage: {agent} COMMAND OPTIONS'.format(agent=os.path.basename(args[0])))
    print('')
    print('Where COMMAND is one of:     Where OPTIONS is one of:')
    for cmd, options, help_text in cmd_list:
        print('      {command:<25s}    {options:<15s}    {text:<5s}'.format(
            command=cmd,
            options=options,
            text=help_text
        ))
    print('')
    print('Where OPTIONS is one of:')
    for cmd, options, help_text in options_list:
        print('      {command:<25s}    {options:<15s}    {text:<5s}'.format(
            command=cmd,
            options=options,
            text=help_text
        ))
    sys.exit(0)


def error_msg(args, msg):
    print(msg)
    print('')
    usage(args)


def main(args):
    print(args)
    if '-h' in args or \
       '--help' in args:
            usage(args)
    
    if len(args) >= 2:
        arg1 = args[1]
        if arg1 not in [x[0] for x in cmd_list]:
            return error_msg(args, '`{}` is not a valid command.'.format(arg1))
        less_args = args[2:]
        if arg1 == 'register':
            register(less_args, config)
        if arg1 == 'unregister':
            unregister(less_args, config)
        elif arg1 == 'info':
            info(less_args, config)
        elif arg1 == 'genconfig':
            genconfig(less_args, config)
        elif arg1 == 'status' or arg1 == 'st':
            status(less_args, config)
        elif arg1 == 'sync':
            sync(less_args, config)
        elif arg1 == 'install_scheduled_task':
            install_scheduled_task(less_args, config)
        elif arg1 == 'remove_scheduled_task':
            remove_scheduled_task(less_args, config)
        elif arg1 == 'add':
            if len(less_args) >= 1:
                add(less_args, config)
            else:
                print('Missing FILE parameter for command `add`.')
                sys.exit(1)
        elif arg1 == 'remove':
            if len(less_args) >= 1:
                remove(less_args, config)
            else:
                print('Missing FILE parameter for command `remove`.')
                sys.exit(1)
        elif arg1 == 'disable':
            if len(less_args) >= 1:
                disable(less_args, config)
            else:
                print('Missing FILE parameter for command `remove`.')
                sys.exit(1)
    else:
        usage(args)


if __name__ == '__main__':
    main(sys.argv)
